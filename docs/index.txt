The ghc-vis User Guide
======================
Dennis Felsing <dennis@felsing.org>
June 2013
:toc2:
:numbered:

ghc-vis is a tool to visualize live Haskell data structures in GHCi.
Evaluation is not forced and you can interact with the visualized data
structures. This allows seeing Haskell's lazy evaluation and sharing in
action.

== Introduction

Functional programming languages like Haskell offer a way to write
well-structured software, which is easy to understand and still performs well.
In order to achieve this one has to be able to consciously use features that
result from the paradigm of functional programming.

ghc-vis is a tool for visualizing two features of this kind, namely lazy
evaluation and sharing, in a way that can be used in the (self-)teaching of
Haskell and the development and debugging of Haskell software.

A common example for the power of lazy evaluation are infinite data
structures. They are easy to define and convenient to use in Haskell. We can
write

[source,haskell]
ones = [1,1..]

to construct an infinite list of 1s, which we can now access by the suggestive
name _ones_. How does this work? Clearly the entire list can’t be stored in
memory as we do not possess the infinite tape of a turing machine.

We can write a function to retrieve the nth member of a list:

[source,haskell]
at 0 (x:xs) = x
at n (x:xs) = at (n-1) xs

Evaluating _at 1 ones_ extracts the second member of the list _ones_, which
gives us the integer 1. In the same manner _at 2 ones_ and _at 3 ones_ give us
1. But what is happening to the infinite list of ones as we access its
members?

[grid="none",frame="none"]
|====
| After _at 1 ones_: | After _at 2 ones_: | After _at 3 ones_:
| svg:intro1-1[] | svg:intro1-2[] | svg:intro1-3[]
|====

This time no big list is constructed in memory, instead a list is created that
references itself as the rest of the list.

[[basic-usage]]
== Basic usage

=== Installation

More specific installation instructions can be found here:

- link:installing-archlinux[Arch Linux]
- link:installing-gentoo[Gentoo Linux]
- link:installing-debian[Debian]
- link:installing-osx[Mac OS X 10.8]
- link:installing-windows[Windows 7]

The http://hackage.haskell.org/package/ghc-vis[package] is available on
Hackage. Install it like this:

----
$ cabal install ghc-vis
----

Follow the instructions in the output of +cabal install ghc-vis+ to setup the
ghci script.

// sys::[grep "^version:" ../ghc-vis.cabal | sed -e 's#.* \(.*\)#echo ":script /home/deen/.cabal/share/ghc-vis-\1/ghci " >> ~/.ghci#']

You need GTK, Cairo, Pango, Graphviz and their corresponding Haskell library
bindings. If you run into any problems, try this:

----
$ cabal update
$ cabal install gtk2hs-buildtools
----

Another common problem is library profiling, which is not supported by
ghc-vis. You can disable it globally in your cabal config by setting
_library-profiling_ to _False_ in +~/.cabal/config+. If you only want to
install ghc-vis without library profiling run the following:

----
$ cabal install ghc-vis --disable-library-profiling
----

=== Interactive Usage

Now you can run +ghci+ and experiment with ghc-vis. Start the visualization:

----
$ ghci
GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
λ> :vis
----

A window should appear now. This is the visualization window:

image:window.png[width=416,height=379]

Add an expression to the visualization:

----
λ> let a = [1..3]
λ> :view a
λ> let b = cycle a
λ> :view b
λ> :view "foo" ++ "bar"
----

You should now see something similar to this:

svg:1[]

Thunks are red, Functions are yellow, named objects are green and links to an
already shown object are blue.

Notice how _a_ is referenced by _b_.

Evaluate an object that is shown in the visualization. You can also click on
the object to evaluate it. Only thunks, which are named starting with a _t_,
can be evaluated.

----
λ> :eval t2
----

svg:2[]

The first element of _b_ has been evaluated. We see that it's a reference to
the value that's also referenced in _a_, as they share the same name "b0". "S#
1" stands for the Integer data constructor, which is called _S#_ in GHC and its
argument 1.

Switch between the list view and the graph view:

----
λ> :switch
----

svg:3[]

When an object is updated by accessing it, you have to call +:update+ to
refresh the visualization window. You can also click on an object to force an
update:

----
λ> a !! 2
3
λ> :update
----

svg:4[]

Clear the visualization window, this also happens when you +:load+ or
+:reload+ a source file:

----
λ> :clear
----

=== Cabal Sandbox REPL

To run ghc-vis inside a cabal sandbox REPL, you have to install it inside the
sandbox:

----
$ cabal sandbox init
$ cabal install ghc-vis --disable-library-profiling
----

Now to use ghc-vis inside the REPL you have to explicitly load the ghc-vis
package:

----
$ cabal repl
GHCi, version 7.8.3: http://www.haskell.org/ghc/  :? for help
λ> :set -package ghc-vis
λ> :vis
----

== Other Tools

=== :print

The GHCi Debugger has an integrated +:print+ command that inspects data
structures at runtime. Evaluation is not forced, so there are no side effects.

----
$ ghci
GHCi, version 7.6.3: http://www.haskell.org/ghc/  :? for help
λ> let a = [1..3]
λ> :print a
a = (_t1::[Integer])
λ> head a
1
λ> :print a
a = 1 : (_t2::[Integer])
λ> head $ tail a
2
λ> :print a
a = 1 : 2 : (_t3::[Integer])
λ> a
[1,2,3]
λ> :print a
a = [1,2,3]
λ> let b = a ++ a
λ> head b
1
λ> :print b
b = 1 : (_t3::[Integer])
λ> b
[1,2,3,1,2,3]
λ> :print b
b = [1,2,3,1,2,3]
----

These data structures reside on the GHC heap. We can see that expressions are
only evaluated once they are needed. This is called lazy evaluation. To avoid
unnecessary copies of objects on the heap a heap object can be referenced
multiple times instead of being copied into a new location. This is called
sharing. We can see that +:print+ does not tell us how _b_ is sharing values
with _a_ or within itself.

=== vacuum-cairo

Vacuum-cairo on the other hand does tell us how values are shared within b:

----
λ> System.Vacuum.Cairo.view b
----

The following window appears on the screen:

image:vacuum1.png[width=347,height=431]

But vacuum-cairo evaluates the data structure fully before showing it. So we
can't use it to see how data structures are lazily evaluated in Haskell.

Additionally Vacuum-cairo is unable to visualize sharing between different
data structures, like _a_ and _b_ in this case, as only one data structure can
be viewed at any time. We would have to combine the data structures into one
to see which values are referenced in both.

When we use vacuum (and vacuum-graphviz) directly we can inspect data
structures without evaluating them:

----
λ> let a = "foo"
λ> let b = a ++ a
λ> head b
'f'
λ> GHC.Vacuum.GraphViz.graphToDotFile "vacuum2" Data.GraphViz.Commands.Png $
   GHC.Vacuum.nameGraph (GHC.Vacuum.vacuumLazy (a,b))
----

image:vacuum2.png[width=323,height=203]

We can see that the value "C#l3" is referenced both in _a_ and _b_. That's the
_'f'_. What we can't see is that the _l5_ thunk references _a_ and has another
value shared with _a_.

What we'd like to see is something like this, which is what ghc-vis outputs:

svg:0[]

== More Examples

=== Fibonacci Numbers

Let's consider a function _f_ that calculates fibonacci numbers:

----
λ> let f = 0 : 1 : zipWith (+) f (tail f)
λ> :switch
λ> f !! 2
1
λ> :view f
λ> f !! 3
1
λ> :update
λ> f !! 4
2
λ> :update
----

[grid="none",frame="none"]
|====
| After _f !! 2_: | After _f !! 3_: | After _f !! 4_:
| svg:fib1[] | svg:fib2[] | svg:fib3[]
|====

=== Interpreted and Compiled Code

Interpreted and compiled code may looks very different when evaluating. First
an example of interpreted code, +-fbyte-code+ is the default in GHCi if the
code hasn't been compiled already:

----
λ> :set -fbyte-code
λ> :!cat Sieve.hs
module Sieve where
primes = sieve [2..] where sieve (p:xs) = p : sieve [x | x <- xs, x `mod` p > 0]
λ> :l Sieve
[1 of 1] Compiling Sieve            ( Sieve.hs, interpreted )
Ok, modules loaded: Sieve.
λ> head primes
2
λ> :switch
λ> :view primes
----

svg:interpreted[]

The view is rather confusing as a lot of type class information is included.
Let's look at compiled object code:

----
λ> :set -fobject-code
λ> :l Sieve
[1 of 1] Compiling Sieve            ( Sieve.hs, Sieve.o )
Ok, modules loaded: Sieve.
λ> head primes
2
λ> :switch
λ> :view primes
----

svg:compiled[]

=== Simple Lists

----
λ> let l = [1,2,3]
λ> :view l
λ> let l2 = 4:l
λ> :view l2
λ> let x = l ++ l2
λ> :view x
λ> let y = id (:) () y
λ> :view y
λ> :eval t1
λ> :switch
----

[grid="none",frame="none"]
|====
| svg:5[] | svg:6[]
|====

=== Binary Tree

----
λ> data BinaryTree = BT BinaryTree Int BinaryTree | Leaf
λ> let x = BT (BT (BT Leaf 1 (BT Leaf 2 Leaf)) 3 (BT (BT Leaf 4 (BT Leaf 5 Leaf)) 6 Leaf)) 7 Leaf
λ> :view x
λ> :switch
----

svg:bt[]

=== Double Linked Lists

A working cyclic double linked list: link:dll.hs[]

----
λ> :l dll.hs
λ> let x = mkDList [1..4]
λ> :view x
λ> :switch
----

svg:dll[]

A non-working cyclic double linked list: link:dll2.hs[] New list elements get
created all the time instead of referencing the existing ones.

----
λ> :l dll2.hs
λ> let x = mkDList [1..4]
λ> :view x
λ> :switch
----

svg:dll2[]

=== Deterministic Finite Automata

link:dfa.hs[]

----
λ> :l dfa
λ> :view dom18
λ> :switch
----

svg:dfa[]

=== IntMap

----
λ> :view (Data.IntMap.fromList $ zip [1..10] [1..])
λ> :eval t0
λ> :switch
----

svg:intmap[]

=== ByteString

----
λ> let a = Data.ByteString.pack [0x44,0x45,0x46]
λ> :view a
λ> let b = Data.ByteString.append a a
λ> :view b
λ> :switch
λ> a
"DEF"
λ> :update
----

svg:bytestring[]

=== Array

----
λ> let b = GHC.Arr.array ((1,1),(3,2)) [((1,1),42),((1,2),23),((2,1),999),((2,2),1000),((3,1),1001),((3,2),1002)]
λ> b
array ((1,1),(3,2)) [((1,1),42),((1,2),23),((2,1),999),((2,2),1000),((3,1),1001),((3,2),1002)]
λ> :view b
λ> :switch
----

svg:array[]

[[combined-debugger]]
== Combined with GHCi's Debugger

ghc-vis can be used to watch data structures while a computation is inspected
using GHCi's debugger:

++++
<video width="640" height="480" controls>
  <source src="debugger.mp4" type="video/mp4" />
  <source src="debugger.webm" type="video/webm" />
  Your browser does not seem to support h264 or webm videos, please down the video below.
</video>
++++
*Download Video:* link:debugger.mp4[], link:debugger.webm[]

== Symbol Explanations and Commands

These objects are used in GHCi:
[grid="rows",frame="topbot",options="header"]
|====
| Name                | Graph View | List View | Explanation
| Thunk               | _Thunk_    | _t0_      | Unevaluated value
| General Application | _AP_       | _t0_      | Unevaluated value (mostly used in interpreted code)
| Function            | _Fun_      | _f0_      | Function applied to less parameters than it takes (possibly 0)
| Partial Application | _PAP_      | _f0_      | Function applied to less parameters than it takes (mostly used in interpreted code)
|====

Commands are executed on the GHCi command line:
[grid="rows",frame="topbot",options="header"]
|====
| Command        | Action
| +:vis+         | Run the visualization window
| +:mvis+        | Run the minimal visualization window
| +:view x+      | Add the Haskell expression x to the visualization window
| +:eval t+      | Force evaluation to WHNF of the thunk named _t_
| +:switch+      | Switch between the visualization types (list, graph)
| +:update+      | Update the visualization window, in case an expression has changed
| +:clear+       | Remove all visualized expressions
| +:restore+     | Restore all hidden nodes
| +:setDepth x+  | Set the maximum recursion depth closures are followed on the heap to x
| +:timeback+    | Go back in history
| +:timeforward+ | Go forward in history
| +:export file+ | Export the current visualization to a file; SVG, PDF, PS and PNG supported
|====

== Key and Mouse Bindings

Key and mouse bindings work in the visualization window:
[cols="3*,3,4",grid="rows",frame="topbot",options="header"]
|====
3+| Keys                | Mouse                | Action
3+| v                   |                      | Switch view
3+| c                   |                      | Clear view
3+| C                   |                      | Restore hidden nodes
3+| u                   |                      | Update view
  | Enter, 2+| Space,   | Left click           | Evaluate and update
3+| ,                   |                      | Go back in history
3+| .                   |                      | Go forward in history
3+|                     | Right click and drag | Move
  | Left,    | h, | a   |                      | Move left
  |          | H, | A   |                      | Move left fast
  | Right,   | l, | d   |                      | Move right
  |          | L, | D   |                      | Move right fast
  | Up,      | k, | w   |                      | Move up
  |          | K, | W   |                      | Move up fast
  | Down,    | j, | s   |                      | Move down
  |          | J, | S   |                      | Move down fast
  | \+,    2+| PageUp   | Wheel up             | Zoom in
  | -,     2+| PageDown | Wheel down           | Zoom out
  | 0,     2+| =        | Wheel click          | Reset zoom and position
|====

== Using ghc-vis as a Library

Although ghc-vis is meant to be used in GHCi it can also be used as a library
in regular Haskell programs which are run or compiled by GHC. You can run
those programs using +runghc example.hs+ or +ghc -threaded example.hs &&
./example+. Without the +-threaded+-Flag ghc-vis does not work correctly. This
is an example using ghc-vis outside of GHCi:

[source,haskell]
----
import GHC.Vis

main = do
  let a = "teeest"
  let b = [1..3]
  let c = b ++ b
  let d = [1..]
  putStrLn $ show $ d !! 1

  vis
  view a "a"
  view b "b"
  view c "c"
  view d "d"

  getChar
  switch

  getChar
----

== Thesis

ghc-vis was developed as part of my Bachelor Thesis titled
link:thesis[Visualization of Lazy Evaluation and Sharing]. It contains some
more examples, explains how it works and what kind of problems I encountered.

== Bugs, Feature Requests, Development

If you have any problems, new ideas or comments concerning ghc-vis, you can
use http://github.com/def-/ghc-vis/issues[the github issue tracker].

// vim: set syntax=asciidoc:
